# @assertions: The number of assertions to queue up on the embedded side. As assertions are made, they cannot be spilled out over the serial port as fast as they are generated. The TUnit embedded library queues up assertions and multi-packet fail messages and sends them when it can. The default number of assertions is 5. If you bump this up, be aware that your RAM consumption will increase on your node.
# @extra <any build/install extras>: (@extras also works) Add in any command line arguments for compiling. You can use this, for example, to pull in .extra files from support/make. We recommend you do not use it for CFLAGS definitions or includes. @extra options get aggregated together as TUnit traverses into sub-directories.
# @cflags <CFLAGS definition>: Define CFLAGS here. You can use @cflags or @cflag. And you can start out your CFLAGS definition with CFLAGS+= or just start with -D... or -I... For example: @cflags CFLAGS+=-DLOW_POWER_LISTENING and @cflags -DLOW_POWER_LISTENING are identical. @cflags options get aggregated together as TUnit traverses into sub-directories.
# @compile [always|once|never]: Define how a test gets compiled. Always is default. Once means "only compile if a build doesn't already exist." Never means "compile the test manually."
# @ignore <single target>: Ignore one or multiple platform targets that should never run this test.
# @only <single target>: Specify one or multiple platform targets that apply to this test, and don't allow any others.
# @minnodes <# nodes>: The minimum number of nodes this test will allow.
# @maxnodes <# nodes>: The maximum number of nodes this test will allow.
# @exactnodes <# of exact nodes>: The exact nodes required for this test to run.
# @mintargets <# of minimum targets for heterogeneous network testing>: The minimum number of targets required for this test to run. For example, this could be used to ensure your test runs on a MicaZ and TelosB, testing the compatibility between the two.
# @timeout <minutes>: Default is 1 minute. If your test is expected to run for more than 1 minute, increase the timeout time. Be sure you call .done() in your embedded test so TUnit knows when your test is done executing!
# @skip: Skip this test and any tests in sub-directories.

@only sm4
@compile always